{"ast":null,"code":"const API_URL = \"http://localhost:4000/api/v1/\";\n\n// Utility function for handling fetch requests\nconst fetchApi = async (url, options) => {\n  try {\n    const response = await fetch(url, options);\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`Error: ${response.status} - ${errorText}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    throw new Error(`API Request Failed: ${error.message}`);\n  }\n};\n\n// POST request to login\nexport const loginUser = async userData => {\n  const response = await fetchApi(`${API_URL}/login`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(userData)\n  });\n  return response;\n};\n\n// GET request to fetch all projects\nexport const fetchProjects = async () => {\n  const response = await fetchApi(`${API_URL}/project/projects`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  return response;\n};\n\n// GET request to fetch a single project by ID\nexport const fetchProjectById = async projectId => {\n  const response = await fetchApi(`${API_URL}/project/projects/${projectId}`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  return response;\n};\n\n// POST request to create a new project\nexport const createProject = async projectData => {\n  const response = await fetchApi(`${API_URL}/project/projects`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(projectData)\n  });\n  return response;\n};\n\n// PUT request to update an existing project by ID\nexport const updateProject = async (projectId, projectData) => {\n  const response = await fetchApi(`${API_URL}/project/projects/${projectId}`, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(projectData)\n  });\n  return response;\n};\n\n// DELETE request to delete a project by ID\nexport const deleteProject = async projectId => {\n  const response = await fetchApi(`${API_URL}/project/projects/${projectId}`, {\n    method: \"DELETE\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  return response;\n};","map":{"version":3,"names":["API_URL","fetchApi","url","options","response","fetch","ok","errorText","text","Error","status","data","json","error","message","loginUser","userData","method","headers","body","JSON","stringify","fetchProjects","fetchProjectById","projectId","createProject","projectData","updateProject","deleteProject"],"sources":["C:/Users/Shivam singh/Desktop/MVP project/frontend/src/services/api.js"],"sourcesContent":["const API_URL = \"http://localhost:4000/api/v1/\";\r\n\r\n// Utility function for handling fetch requests\r\nconst fetchApi = async (url, options) => {\r\n  try {\r\n    const response = await fetch(url, options);\r\n    if (!response.ok) {\r\n      const errorText = await response.text();\r\n      throw new Error(`Error: ${response.status} - ${errorText}`);\r\n    }\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    throw new Error(`API Request Failed: ${error.message}`);\r\n  }\r\n};\r\n\r\n// POST request to login\r\nexport const loginUser = async (userData) => {\r\n  const response = await fetchApi(`${API_URL}/login`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(userData),\r\n  });\r\n  return response;\r\n};\r\n\r\n// GET request to fetch all projects\r\nexport const fetchProjects = async () => {\r\n  const response = await fetchApi(`${API_URL}/project/projects`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n  return response;\r\n};\r\n\r\n// GET request to fetch a single project by ID\r\nexport const fetchProjectById = async (projectId) => {\r\n  const response = await fetchApi(`${API_URL}/project/projects/${projectId}`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n  return response;\r\n};\r\n\r\n// POST request to create a new project\r\nexport const createProject = async (projectData) => {\r\n  const response = await fetchApi(`${API_URL}/project/projects`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(projectData),\r\n  });\r\n  return response;\r\n};\r\n\r\n// PUT request to update an existing project by ID\r\nexport const updateProject = async (projectId, projectData) => {\r\n  const response = await fetchApi(`${API_URL}/project/projects/${projectId}`, {\r\n    method: \"PUT\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(projectData),\r\n  });\r\n  return response;\r\n};\r\n\r\n// DELETE request to delete a project by ID\r\nexport const deleteProject = async (projectId) => {\r\n  const response = await fetchApi(`${API_URL}/project/projects/${projectId}`, {\r\n    method: \"DELETE\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n  return response;\r\n\r\n\r\n};\r\n\r\n\r\n\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAG,+BAA+B;;AAE/C;AACA,MAAMC,QAAQ,GAAG,MAAAA,CAAOC,GAAG,EAAEC,OAAO,KAAK;EACvC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAG,EAAEC,OAAO,CAAC;IAC1C,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIC,KAAK,CAAC,UAAUL,QAAQ,CAACM,MAAM,MAAMH,SAAS,EAAE,CAAC;IAC7D;IACA,MAAMI,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd,MAAM,IAAIJ,KAAK,CAAC,uBAAuBI,KAAK,CAACC,OAAO,EAAE,CAAC;EACzD;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,SAAS,GAAG,MAAOC,QAAQ,IAAK;EAC3C,MAAMZ,QAAQ,GAAG,MAAMH,QAAQ,CAAC,GAAGD,OAAO,QAAQ,EAAE;IAClDiB,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,QAAQ;EAC/B,CAAC,CAAC;EACF,OAAOZ,QAAQ;AACjB,CAAC;;AAED;AACA,OAAO,MAAMkB,aAAa,GAAG,MAAAA,CAAA,KAAY;EACvC,MAAMlB,QAAQ,GAAG,MAAMH,QAAQ,CAAC,GAAGD,OAAO,mBAAmB,EAAE;IAC7DiB,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC,CAAC;EACF,OAAOd,QAAQ;AACjB,CAAC;;AAED;AACA,OAAO,MAAMmB,gBAAgB,GAAG,MAAOC,SAAS,IAAK;EACnD,MAAMpB,QAAQ,GAAG,MAAMH,QAAQ,CAAC,GAAGD,OAAO,qBAAqBwB,SAAS,EAAE,EAAE;IAC1EP,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC,CAAC;EACF,OAAOd,QAAQ;AACjB,CAAC;;AAED;AACA,OAAO,MAAMqB,aAAa,GAAG,MAAOC,WAAW,IAAK;EAClD,MAAMtB,QAAQ,GAAG,MAAMH,QAAQ,CAAC,GAAGD,OAAO,mBAAmB,EAAE;IAC7DiB,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACK,WAAW;EAClC,CAAC,CAAC;EACF,OAAOtB,QAAQ;AACjB,CAAC;;AAED;AACA,OAAO,MAAMuB,aAAa,GAAG,MAAAA,CAAOH,SAAS,EAAEE,WAAW,KAAK;EAC7D,MAAMtB,QAAQ,GAAG,MAAMH,QAAQ,CAAC,GAAGD,OAAO,qBAAqBwB,SAAS,EAAE,EAAE;IAC1EP,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACK,WAAW;EAClC,CAAC,CAAC;EACF,OAAOtB,QAAQ;AACjB,CAAC;;AAED;AACA,OAAO,MAAMwB,aAAa,GAAG,MAAOJ,SAAS,IAAK;EAChD,MAAMpB,QAAQ,GAAG,MAAMH,QAAQ,CAAC,GAAGD,OAAO,qBAAqBwB,SAAS,EAAE,EAAE;IAC1EP,MAAM,EAAE,QAAQ;IAChBC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC,CAAC;EACF,OAAOd,QAAQ;AAGjB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}